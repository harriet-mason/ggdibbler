[{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"An introduction to ggdibbler","text":"ggdibbler R package implementing signal suppression ggplot2. Usually, uncertainty visualisation focuses expressing uncertainty distribution probability, whereas ggdibble differentiates viewing uncertainty visualisation transformation existing graphic incorperates uncertainty. package allows replace existing variable observations graphic, variable distributons. particularly useful visualisations estimates, mean. provide ggdibble code existing plot, repalace one variables distribution, convert visualisation ’s signal supressed counterpart.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"An introduction to ggdibbler","text":"can install development version ggdibbler GitHub :","code":"# install.packages(\"pak\") pak::pak(\"harriet-mason/ggdibbler\")"},{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"why-use-ggdibbler-at-all","dir":"Articles","previous_headings":"","what":"Why use ggdibbler at all?","title":"An introduction to ggdibbler","text":"may obvious outset want package, , plenty geoms plenty ways visualise distributions, point ? value ggdibbler becomes aparent look use cases software.","code":"library(ggdibbler) library(ggplot2) library(dplyr) library(sf) library(distributional)"},{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"spatial-example","dir":"Articles","previous_headings":"Why use ggdibbler at all?","what":"Spatial example","title":"An introduction to ggdibbler","text":"Let us look one example data sets comes ggdibbler,toy_temp. data set simulated data set represents observations collected citizen scientists several counties Iowa. county several measurements made individual scientists time day, exact location provided preserve anonymity. Different counties can different numbers citizen scientists temperature measurements can significant amount variance due recordings made different people slightly different locations within county. recorded temperature comes county citizen scientist belongs , temperature recording made, scientist’s ID number. also variables define spatial elements county, ’s geometry, county centroid’s longitude latitude. slightly difficult, can view individual observations plotting centroid longitude latitude (little jitter) drawing counties background referece.  Typically, visualise data way. much common approach take average county display choropleth map, displayed .  plot fine, loose key piece information, specifically understanding mean estimate. means estimate sampling distribuiton invisible us make visualisation. can see wave like pattern data, sometimes spatial patterns result significant differences population, may disappear include variance estimates, can calculate average. Getting estimate along variance also common format governments supply data. Just like citizen scientist case, often done preserve anonymity. problem format data, way us include variance information visualisation. can visualise estimate variance separately. ggdibbler comes . ggdibbler ggplot extension allows us visulise distributions previously visualise single values. Instead trying use estimate variance different values, combine single distribution variable thanks distributional package can use ggdibbler version geom_sf, geom_sf_sample.  maintain flexibility, geom_sf_sample highlight original boundary lines, can easily added just adding another layer. Currently geom_sf accepts random fill, subdivides geometry fill sample. eventually extended geom_sf aesthetics.","code":"glimpse(toy_temp) #> Rows: 990 #> Columns: 6 #> $ county_name      <chr> \"Lyon County\", \"Dubuque County\", \"Crawford County\", \"… #> $ county_geometry  <MULTIPOLYGON [m]> MULTIPOLYGON (((274155.2 -1..., MULTIPOL… #> $ county_longitude <dbl> 306173.3, 746092.2, 381255.2, 696287.1, 729905.9, 306… #> $ county_latitude  <dbl> -172880.7, -239861.5, -318675.9, -153979.0, -280551.9… #> $ recorded_temp    <dbl> 21.08486, 28.94271, 26.39905, 27.10343, 34.20208, 20.… #> $ scientistID      <chr> \"#74991\", \"#22780\", \"#55325\", \"#46379\", \"#84259\", \"#9… # Plot Raw Data ggplot(toy_temp) +   geom_sf(aes(geometry=county_geometry)) +   geom_jitter(aes(x=county_longitude, y=county_latitude, colour=recorded_temp),                width=5000, height =5000, alpha=0.7) # Mean data toy_temp_mean <- toy_temp |>    group_by(county_name) |>   summarise(temp_mean = mean(recorded_temp))     # Plot Mean Data ggplot(toy_temp_mean) +   geom_sf(aes(geometry=county_geometry, fill=temp_mean)) # Mean and variance data toy_temp_est <- toy_temp |>    group_by(county_name) |>   summarise(temp_mean = mean(recorded_temp),             temp_se = sd(recorded_temp)/sqrt(n())) # Distribution toy_temp_dist <- toy_temp_est |>    mutate(temp_dist = dist_normal(temp_mean, temp_se)) |>   select(county_name, temp_dist)   # Plot Distribution Data ggplot(toy_temp_dist) +   geom_sf_sample(aes(geometry=county_geometry, fill=temp_dist)) ggplot(toy_temp_dist) +    geom_sf_sample(aes(geometry = county_geometry, fill=temp_dist), linewidth=0.1) +    geom_sf(aes(geometry = county_geometry), fill=NA, linewidth=1)"},{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"other-examples","dir":"Articles","previous_headings":"","what":"Other examples","title":"An introduction to ggdibbler","text":"used geom_sf_sample motivating example ggdibbler, approach goes beyond just spatial maps. can apply technique ggplot graphic. Additionally, ggdibbler works distributional object, argue distributional works types uncertainty. Bounded values? use dist_uniform(lowerbound, upperbound) Uncertain predicted classes? use dist_categorical Want sample values specific vector values (posterior)? use dist_sample uncertainty can expressed numerically (unfortunately basic prerequisite plotting anything, just uncertainty) can almost certainly captured distribution.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/articles/ggdibbler-vignette.html","id":"geom_point-examples","dir":"Articles","previous_headings":"Other examples","what":"geom_point examples","title":"An introduction to ggdibbler","text":"basic form, geom_point just displays individual samples distribution.  variable can random, just x y. can combination random deterministic variables, random deterministic. ggdibbler package works variables random behalf.  pass random variables aesthetics like colour label, position aesthetics x y, might want add jitter can see points (otherwise see one outcome sample).","code":"point_data <- data.frame(   random_x = c(dist_uniform(2,3),                dist_normal(3,2),               dist_exponential(3)),   random_y = c(dist_gamma(2,1),              dist_sample(x = list(rnorm(100, 5, 1))),              dist_exponential(1)),    # have some uncertainty as to which category each value belongs to   random_colour = dist_categorical(prob = list(c(0.8,0.15,0.05),                                                  c(0.25,0.7,0.05),                                                  c(0.25,0,0.75)),                                       outcomes = list(c(\"A\", \"B\", \"C\"))),   deterministic_xy = c(1,2,3),   deterministic_colour = c(\"A\", \"B\", \"C\"))      # deterministic colour, random x and y ggplot() +    geom_point_sample(data = point_data, aes(x=random_x, y=random_y, colour = deterministic_colour)) # random x, y, and colour ggplot() +    geom_point_sample(data = point_data, aes(x=random_x, y=random_y, colour = random_colour),                      times=1000, alpha=0.3) ggplot() +    geom_point_sample(data = point_data,                      aes(x=deterministic_xy, y=deterministic_xy, colour = random_colour),                     position = position_jitter(width=0.1, height=0.1))"},{"path":[]},{"path":"https://harriet-mason.github.io/ggdibbler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harriet Mason. Author, maintainer. Dianne Cook. Author. Sarah Goodwin. Author. Susan VanderPlas. Author.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mason H, Cook D, Goodwin S, VanderPlas S (2025). ggdibbler: Add Uncertainty Data Visualisations. R package version 0.3.0.9000, https://harriet-mason.github.io/ggdibbler/.","code":"@Manual{,   title = {ggdibbler: Add Uncertainty to Data Visualisations},   author = {Harriet Mason and Dianne Cook and Sarah Goodwin and Susan VanderPlas},   year = {2025},   note = {R package version 0.3.0.9000},   url = {https://harriet-mason.github.io/ggdibbler/}, }"},{"path":"https://harriet-mason.github.io/ggdibbler/index.html","id":"ggdibbler-","dir":"","previous_headings":"","what":"Add Uncertainty to Data Visualisations","title":"Add Uncertainty to Data Visualisations","text":"ggdibbler R package implementing signal suppression ggplot2. Usually, uncertainty visualisation focuses expressing uncertainty distribution probability, whereas ggdibble differentiates viewing uncertainty visualisation transformation existing graphic incorperates uncertainty. package allows replace existing variable observations graphic, variable distributons. particularly useful visualisations estimates. provide ggdibbler code existing plot, repalace one variables distribution, convert visualisation ’s signal supression counterpart.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/index.html","id":"future-additions-to-the-package","dir":"","previous_headings":"","what":"Future additions to the package","title":"Add Uncertainty to Data Visualisations","text":"eventual goal ggdibbler allows distribution object passed aesthetic ggplot2 geom (long gotten geom). status goal regularly updated Geometries - Status List issue. happy expedite specific geoms might want, just post request github issue.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Add Uncertainty to Data Visualisations","text":"can install stable version ggdibbler CRAN : can install development version ggdibbler GitHub :","code":"# install.packages(\"pak\") install.packages(\"ggdibbler\") # install.packages(\"pak\") pak::pak(\"harriet-mason/ggdibbler\")"},{"path":"https://harriet-mason.github.io/ggdibbler/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Add Uncertainty to Data Visualisations","text":"essence, ggdibbler makes visualising uncertainty easy, just replace geom_* geom_*_sample replace deterministic variable distributional variable, get uncertainty visualisation. Woweee. Typically, average estimate series areas, simply display average, keep average separate. example choropleth map.  can use geom_sf_sample ggdibbler package instead view estimate sample values sampling distribution. want see original geometry lines, recommend layering geom_sf NA fill top.  Currently geom_sf accepts random fill, subdivides geometry fill sample. eventually extended geom_sf aesthetics. geoms, geom_point_sample accept random variables aes. can feed combination random deterministic variables geom_*_sample layer.  pass random variables aesthetics like colour label, position aesthetics x y, might want add jitter can see points (otherwise see one outcome sample).","code":"library(distributional) library(dplyr) library(sf) library(ggplot2) library(ggdibbler) # Make average summary of data toy_temp_mean <- toy_temp |>    dplyr::group_by(county_name) |>   summarise(temp_mean = mean(recorded_temp))  # plot it ggplot(toy_temp_mean) +   geom_sf(aes(geometry=county_geometry, fill=temp_mean)) +   scale_fill_distiller(palette = \"OrRd\") set.seed(1) # sample map toy_temp_dist |>    ggplot() +    geom_sf_sample(aes(geometry = county_geometry, fill=temp_dist), linewidth=0) +    geom_sf(aes(geometry = county_geometry), fill=NA, linewidth=1) +   scale_fill_distiller(palette = \"OrRd\") point_data <- data.frame(deterministic_x = c(1,2,3),                          uncertain_y = c(dist_gamma(2,1),                                       dist_sample(x = list(rnorm(100, 5, 1))),                                       dist_exponential(1)),                          uncertain_class = dist_categorical(prob = list(c(0.8,0.15,0.05),                                                                       c(0.25,0.7,0.05),                                                                       c(0.25,0,0.75)),                                                           outcomes = list(c(\"A\", \"B\", \"C\")))) # A geom_point with random varianles ggplot() +    geom_point_sample(data = point_data,                      aes(x=deterministic_x, y=uncertain_y, colour = uncertain_class)) ggplot() +    geom_point_sample(data = point_data,                      aes(x=deterministic_x, y=deterministic_x, colour = uncertain_class),                     position = position_jitter(width=0.1, height=0.1))"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_bar_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Bar Charts — geom_bar_sample","title":"Uncertain Bar Charts — geom_bar_sample","text":"Identical geom_bar, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_bar_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Bar Charts — geom_bar_sample","text":"","code":"geom_bar_sample(   mapping = NULL,   data = NULL,   stat = \"count_sample\",   position = \"dodge\",   ...,   just = 0.5,   times = 10,   lineend = \"butt\",   linejoin = \"mitre\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_col_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"dodge\",   ...,   just = 0.5,   times = 10,   lineend = \"butt\",   linejoin = \"mitre\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_bar_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Bar Charts — geom_bar_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. just Adjustment column placement. Set 0.5 default, meaning columns centered axis breaks. Set 0 1 place columns left/right axis breaks. Note argument may unintended behaviour used alternative positions, e.g. position_dodge(). times parameter used control number values sampled distribution. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_bar_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Bar Charts — geom_bar_sample","text":"","code":"library(distributional) library(ggplot2) #>  #> Attaching package: ‘ggplot2’ #> The following object is masked from ‘package:ggdibbler’: #>  #>     stat_count  g <- ggplot(mpg, aes(class)) #ggplot q <- ggplot(uncertain_mpg, aes(class)) #ggdibbler  # Number of cars in each class: g + geom_bar() #ggplot  q + geom_bar_sample() #ggdibbler   # Total engine displacement of each class g + geom_bar(aes(weight = displ)) #ggplot  q + geom_bar_sample(aes(weight = displ)) #ggdibbler   # Map class to y instead to flip the orientation ggplot(mpg) + geom_bar(aes(y = class)) #ggplot  ggplot(uncertain_mpg) + geom_bar_sample(aes(y = class)) #ggdibbler   # geom_col also has a sample counterpart df <- data.frame(trt = c(\"a\", \"b\", \"c\"), outcome = c(2.3, 1.9, 3.2)) uncertain_df <-  data.frame(trt = c(\"a\", \"b\", \"c\"),                              outcome = dist_normal(mean = c(2.3, 1.9, 3.2), sd = c(0.5, 0.8, 0.7))) # ggplot ggplot(df, aes(trt, outcome)) +   geom_col()  # ggdibbler ggplot(uncertain_df, aes(x=trt, y=outcome)) +   geom_col_sample(alpha=0.05, position = \"identity\", times=30)  ggplot(uncertain_df, aes(x=trt, y=outcome)) +   geom_col_sample(times = 30)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_count_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Count overlapping points — geom_count_sample","title":"Uncertain Count overlapping points — geom_count_sample","text":"Identical geom_count, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_count_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Count overlapping points — geom_count_sample","text":"","code":"geom_count_sample(   mapping = NULL,   data = NULL,   stat = \"sum_sample\",   position = \"identity\",   ...,   times = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_count(   mapping = NULL,   data = NULL,   geom = \"bar\",   position = \"identity\",   ...,   orientation = NA,   times = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_sum_sample(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   times = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_count_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Count overlapping points — geom_count_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. default, times set 30. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders(). geom, stat Use override default connection geom_count() stat_sum(). information overriding connections, see stat geom arguments work. orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_count_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Count overlapping points — geom_count_sample","text":"","code":"library(ggplot2)  # Discrete values have overplotting # ggplot ggplot(mpg, aes(cty, hwy)) +   geom_point()  # ggdibbler ggplot(uncertain_mpg, aes(cty, hwy)) +   geom_point_sample()   # Can use geom_count to fix it # ggplot ggplot(mpg, aes(cty, hwy)) +   geom_count()  # ggdibbler (alpha for resample overlap) ggplot(uncertain_mpg, aes(cty, hwy)) +   geom_count_sample(alpha=0.2)      # Best used in conjunction with scale_size_area  # ggplot ggplot(mpg, aes(cty, hwy)) +   geom_count() +   scale_size_area()  # ggdibbler ggplot(uncertain_mpg, aes(cty, hwy)) +   geom_count_sample(alpha=0.2) +   scale_size_area()"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_density_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Densities with Uncertainty — geom_density_sample","title":"Visualise Densities with Uncertainty — geom_density_sample","text":"Identical geom_density, except fill density represented sample distribution.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_density_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Densities with Uncertainty — geom_density_sample","text":"","code":"geom_density_sample(   mapping = NULL,   data = NULL,   stat = \"density_sample\",   position = \"identity\",   ...,   times = 10,   outline.type = \"upper\",   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_density_sample(   mapping = NULL,   data = NULL,   stat = \"density_sample\",   position = \"identity\",   ...,   times = 10,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   outline.type = \"both\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_density_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Densities with Uncertainty — geom_density_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number samples outline.type Type outline area; \"\" draws upper lower lines, \"upper\"/\"lower\" draws respective lines . \"full\" draws closed polygon around area. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_density_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Densities with Uncertainty — geom_density_sample","text":"","code":"library(ggplot2)  # Basic density plot # GGPLOT ggplot(smaller_diamonds, aes(carat)) + geom_density()  # GGDIBBLER ggplot(smaller_uncertain_diamonds, aes(carat)) + geom_density_sample()   # Flipped orientation # GGPLOT ggplot(smaller_diamonds, aes(y = carat)) +   geom_density()  # GGDIBBLER ggplot(smaller_uncertain_diamonds, aes(y = carat)) +   geom_density_sample()   # Adjust smoothness #GGPLOT ggplot(smaller_diamonds, aes(carat)) +   geom_density(adjust = 1/5)  #GGDIBBLER ggplot(smaller_uncertain_diamonds, aes(carat)) +   geom_density_sample(adjust = 1/5)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_jitter_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Jittered Points — geom_jitter_sample","title":"Uncertain Jittered Points — geom_jitter_sample","text":"Identical geom_jitter, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_jitter_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Jittered Points — geom_jitter_sample","text":"","code":"geom_jitter_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"jitter\",   ...,   width = NULL,   height = NULL,   na.rm = FALSE,   times = 10,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_jitter_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Jittered Points — geom_jitter_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. width, height Amount vertical horizontal jitter. jitter added positive negative directions, total spread twice value specified . omitted, defaults 40% resolution data: means jitter values occupy 80% implied bins. Categorical data aligned integers, width height 0.5 spread data possible see distinction categories. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. times parameter used control number values sampled distribution. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_jitter_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Jittered Points — geom_jitter_sample","text":"","code":"library(ggplot2)  # ggplot p <- ggplot(mpg, aes(cyl, hwy)) #ggplot p + geom_point()  p + geom_jitter()   # ggdibbler q <- ggplot(uncertain_mpg, aes(cyl, hwy)) #ggdibbler q + geom_point_sample(times=10)   q + geom_jitter_sample(times=10)   # Add aesthetic mappings p + geom_jitter(aes(colour = class)) #ggplot  p + geom_jitter_sample(aes(colour = class)) #ggdibler   # Use smaller width/height to emphasise categories p + geom_jitter(width = 0.2) # ggplot  q + geom_jitter_sample(width = 0.2, times=10) # ggdibbler"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_path_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Connected observations — geom_path_sample","title":"Uncertain Connected observations — geom_path_sample","text":"Identical geom_path, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_path_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Connected observations — geom_path_sample","text":"","code":"geom_path_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   arrow = NULL,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_line_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   orientation = NA,   arrow = NULL,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_step_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   orientation = NA,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = NULL,   arrow.fill = NULL,   direction = \"hv\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_path_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Connected observations — geom_path_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. arrow Arrow specification, created grid::arrow(). arrow.fill fill colour use arrow head (closed). NULL means use colour aesthetic. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders(). orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail. direction direction stairs: 'vh' vertical horizontal, 'hv' horizontal vertical, 'mid' step half-way adjacent x-values.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_path_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Connected observations — geom_path_sample","text":"","code":"library(ggplot2) # geom_line() is suitable for time series #ggplot ggplot(economics, aes(date, unemploy)) + geom_line()   #ggdibbler ggplot(uncertain_economics, aes(date, unemploy)) +    geom_line_sample(alpha=0.1)    # You can get a timeseries that run vertically by setting the orientation # ggplot ggplot(economics, aes(unemploy, date)) +    geom_line(orientation = \"y\")  # ggdibbler ggplot(uncertain_economics, aes(unemploy, date)) +    geom_line_sample(orientation = \"y\", alpha=0.1)  # geom_step() is useful when you want to highlight exactly when # the y value changes recent <- economics[economics$date > as.Date(\"2013-01-01\"), ] uncertain_recent <- uncertain_economics[uncertain_economics$date > as.Date(\"2013-01-01\"), ] # geom line ggplot(recent, aes(date, unemploy)) + geom_line() #ggplot  ggplot(uncertain_recent, aes(date, unemploy)) + geom_line_sample(alpha=0.3) #ggdibbler  ggplot(recent, aes(date, unemploy)) + geom_step() #ggplot  ggplot(uncertain_recent, aes(date, unemploy)) + geom_step_sample(alpha=0.3) #ggdibbler   # Changing parameters  # ggplot ggplot(economics, aes(date, unemploy)) +   geom_line(colour = \"red\")  # ggdibbler ggplot(uncertain_economics, aes(date, unemploy)) +   geom_line_sample(colour = \"red\", alpha=0.1)   # Use the arrow parameter to add an arrow to the line # See ?arrow for more details # ggplot c <- ggplot(economics, aes(x = date, y = pop)) c + geom_line(arrow = arrow())  c + geom_line(   arrow = arrow(angle = 15, ends = \"both\", type = \"closed\"))  # ggdibbler d <- ggplot(uncertain_economics, aes(x = date, y = pop)) d + geom_line_sample(arrow = arrow(), alpha=0.1)  d + geom_line_sample(arrow = arrow(angle = 15, ends = \"both\", type = \"closed\"),                      alpha=0.1)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_point_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Uncertain Points — geom_point_sample","title":"Visualise Uncertain Points — geom_point_sample","text":"Identical geom_point, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_point_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Uncertain Points — geom_point_sample","text":"","code":"geom_point_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_point_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Uncertain Points — geom_point_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_point_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Uncertain Points — geom_point_sample","text":"ggplot2 geom representing point_sample can added ggplot object","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_point_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Uncertain Points — geom_point_sample","text":"","code":"library(ggplot2)    # ggplot p <- ggplot(mtcars, aes(wt, mpg)) p + geom_point()     # ggdibbler - set the sample size with times q <- ggplot(uncertain_mtcars, aes(wt, mpg)) q + geom_point_sample(times=20)    # Add aesthetic mappings   # ggplot p + geom_point(aes(colour = factor(cyl)))    # ggdibbler - a q + geom_point_sample(aes(colour = cyl))    # ggdibbler - b   # If you want the categorical colour for a factor,   # You would need to have a categorical rand variable    # If you dont, you can always just compute the colour with after_stat() ggplot(data = uncertain_mtcars, aes(x=wt, y=mpg, distcol=cyl)) +    geom_point_sample(aes(colour = factor(after_stat(distcol))))      # ggplot p + geom_point(aes(shape = factor(cyl)))     # ggdibbler - a q + geom_point_sample(aes(shape = cyl)) +    scale_shape_binned()    # ggdibbler - b ggplot(data = uncertain_mtcars, aes(x=wt, y=mpg, distshape=cyl)) +   geom_point_sample(aes(shape = factor(after_stat(distshape))))    # A \"bubblechart\": # ggplot2 p + geom_point(aes(size = qsec))  # ggdibbler q + geom_point_sample(aes(size = qsec), alpha=0.5)   # Set aesthetics to fixed value # ggplot ggplot(mtcars, aes(wt, mpg)) + geom_point(colour = \"red\", size = 3)  # ggdibbler ggplot(uncertain_mtcars, aes(wt, mpg)) + geom_point_sample(colour = \"red\", size = 3)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_polygon_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Polygons — geom_polygon_sample","title":"Uncertain Polygons — geom_polygon_sample","text":"Identical geom_polygon, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_polygon_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Polygons — geom_polygon_sample","text":"","code":"geom_polygon_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   rule = \"evenodd\",   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_polygon_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Polygons — geom_polygon_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. rule Either \"evenodd\" \"winding\". polygons holes drawn (using subgroup aesthetic) argument defines hole coordinates interpreted. See examples grid::pathGrob() explanation. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_polygon_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Polygons — geom_polygon_sample","text":"","code":"# When using geom_polygon, you will typically need two data frames: # one contains the coordinates of each polygon (positions),  and the # other the values associated with each polygon (values).  An id # variable links the two together library(distributional) library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ids <- factor(c(\"1.1\", \"2.1\", \"1.2\", \"2.2\", \"1.3\", \"2.3\")) values <- data.frame(   id = ids,   value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5) ) positions <- data.frame(   id = rep(ids, each = 4),   x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,         0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),   y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,         2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2) ) # Currently we need to manually merge the two together # ggplot datapoly <- merge(values, positions, by = c(\"id\")) # ggdibbler uncertain_datapoly <- datapoly |>   mutate(x = dist_uniform(x-0.1, x + 0.1),          y = dist_uniform(y-0.1, y + 0.1),          value = dist_uniform(value-0.1, value + 0.1))  # Smaller working example single_data <- datapoly |> filter(id %in% c(\"1.1\", \"1.2\")) single_uncertain_data <- uncertain_datapoly |> filter(id %in% c(\"1.1\", \"1.2\")) # ggplot ggplot(single_data, aes(x = x, y = y)) +   geom_polygon(aes(group = id, fill=value))  # ggdibbler ggplot(single_uncertain_data, aes(x = x, y = y)) +   geom_polygon_sample(aes(group = id, fill=value), alpha=0.1, times=20)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_rug_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Rug plots in the margins — geom_rug_sample","title":"Uncertain Rug plots in the margins — geom_rug_sample","text":"Identical geom_rug, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_rug_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Rug plots in the margins — geom_rug_sample","text":"","code":"geom_rug_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"identity\",   ...,   times = 10,   lineend = \"butt\",   sides = \"bl\",   outside = FALSE,   length = unit(0.03, \"npc\"),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_rug_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Rug plots in the margins — geom_rug_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. lineend Line end style (round, butt, square). sides string controls sides plot rugs appear . can set string containing \"trbl\", top, right, bottom, left. outside logical controls whether move rug tassels outside plot area. Default (FALSE). also need use coord_cartesian(clip = \"\"). set TRUE, also consider changing sides argument \"tr\". See examples. length grid::unit() object sets length rug lines. Use scale expansion avoid overplotting data. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_rug_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Rug plots in the margins — geom_rug_sample","text":"","code":"library(ggplot2)  # ggplot p <- ggplot(mtcars, aes(wt, mpg)) +   geom_point() p  # ggdibbler q <- ggplot(uncertain_mtcars, aes(wt, mpg)) +   geom_point_sample(size=0.7) q   p + geom_rug() #ggplot  q + geom_rug_sample() #ggdibbler   # Rug on bottom only p + geom_rug(sides=\"b\") #ggplot  q + geom_rug_sample(sides=\"b\") #ggdibbler   # All four sides p + geom_rug(sides=\"trbl\") #ggplot  q + geom_rug_sample(sides=\"trbl\") #ggdibbler"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_sf_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","title":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","text":"Identical geom_sf, except fill area distribution. function replace fill area grid, cell filled outcome fill distribution.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_sf_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","text":"","code":"geom_sf_sample(   mapping = aes(),   data = NULL,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   times = 10,   n = deprecated(),   ... )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_sf_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also set one \"polygon\", \"line\", \"point\" override default legend. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders(). times parameter used control number cells grid. geom find factors times select ones make grid square possible. n Deprecated favour times. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_sf_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","text":"ggplot2 geom representing sf_sample can added ggplot object","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_sf_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Sf Objectjects with Uncertainty — geom_sf_sample","text":"","code":"# In it's most basic form, the geom will make a subdivision  library(ggplot2) library(dplyr) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE basic_data <- toy_temp_dist |>   filter(county_name %in% c(\"Pottawattamie County\", \"Mills County\", \"Cass County\")) basic_data |>   ggplot() +    geom_sf_sample(aes(geometry = county_geometry, fill=temp_dist))  # The original borders of the sf object can be hard to see,   # so layering the original geometry on top can help to see the original boundaries basic_data |>     ggplot() +    geom_sf_sample(aes(geometry = county_geometry, fill=temp_dist), linewidth=0, times=100) +    geom_sf(aes(geometry=county_geometry), fill=NA, linewidth=1)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_text_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertain Text — geom_label_sample","title":"Uncertain Text — geom_label_sample","text":"Identical geom_text, except accept distribution place usual aesthetics.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_text_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertain Text — geom_label_sample","text":"","code":"geom_label_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"nudge\",   ...,   times = 10,   parse = FALSE,   label.padding = unit(0.25, \"lines\"),   label.r = unit(0.15, \"lines\"),   border.colour = NULL,   text.colour = NULL,   size.unit = \"mm\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_text_sample(   mapping = NULL,   data = NULL,   stat = \"sample\",   position = \"nudge\",   ...,   times = 10,   parse = FALSE,   check_overlap = FALSE,   size.unit = \"mm\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_text_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertain Text — geom_label_sample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. parse TRUE, labels parsed expressions displayed described ?plotmath. label.padding Amount padding around label. Defaults 0.25 lines. label.r Radius rounded corners. Defaults 0.15 lines. size.unit size aesthetic interpreted: millimetres (\"mm\", default), points (\"pt\"), centimetres (\"cm\"), inches (\"\"), picas (\"pc\"). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders(). check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_text_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncertain Text — geom_label_sample","text":"ggplot2 geom representing point_sample can added ggplot object","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/geom_text_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertain Text — geom_label_sample","text":"","code":"library(ggplot2)  p <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars))) p + geom_text() # ggplot example   # note: categories are determnistic as they are row names q <- ggplot(uncertain_mtcars, aes(wt, mpg, label = rownames(uncertain_mtcars))) q + geom_text_sample(times=10) #ggdibbler   # Avoid overlaps p + geom_text(check_overlap = TRUE) #ggplot  q + geom_text_sample(check_overlap = TRUE) #ggdibbler   # Labels with background p + geom_label() #ggplot  q + geom_label_sample(times=10) #ggdibbler   # Change size of the label p + geom_text(size = 10) #ggplot  q + geom_text_sample(size = 10) #ggdibbler   # Set aesthetics to fixed value p +   geom_point() +   geom_text(hjust = 0, nudge_x = 0.05) #ggplot  q +   geom_point_sample() +   geom_text_sample(hjust = 0, nudge_x = 0.05, times=1) #ggplot"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_continuous_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for continuous distributions — scale_continuous_distribution","title":"Position scales for continuous distributions — scale_continuous_distribution","text":"scales allow distributions passed x y position mapping distribution objects continuous aesthetics. scale can used similarly scale_*_continuous functions, accept transformations. want transform scale, apply transformation coord_* functions, applied stat, existing ggplot infastructure can used. example, like log transformation x axis, plot + coord_transform(x = \"log\") work fine.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_continuous_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for continuous distributions — scale_continuous_distribution","text":"","code":"scale_x_continuous_distribution(   name = waiver(),   breaks = waiver(),   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = oob_keep,   guide = waiver(),   position = \"bottom\",   sec.axis = waiver(),   ... )  scale_y_continuous_distribution(   name = waiver(),   breaks = waiver(),   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = scales::oob_keep,   guide = waiver(),   position = \"left\",   sec.axis = waiver(),   ... )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_continuous_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for continuous distributions — scale_continuous_distribution","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Note position scales, limits provided scale expansion. Also accepts rlang lambda function notation. labels One options . Please note labels vector, highly recommended also set breaks argument vector protect unintended mismatches. NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. guide function used create guide name. See guides() information. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. ... arguments passed scale_(x|y)_continuous()","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_continuous_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Position scales for continuous distributions — scale_continuous_distribution","text":"","code":"library(ggplot2) library(distributional) set.seed(1997) point_data <- data.frame(xvar = c(dist_uniform(2,3),                                   dist_normal(3,2),                                   dist_exponential(3)),                          yvar = c(dist_gamma(2,1),                                    dist_sample(x = list(rnorm(100, 5, 1))),                                    dist_exponential(1))) ggplot(data = point_data) +    geom_point_sample(aes(x=xvar, y=yvar)) +   scale_x_continuous_distribution(name=\"Hello, I am a random variable\", limits = c(-5, 10)) +   scale_y_continuous_distribution(name=\"I am also a random variable\")"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_discrete_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for discrete distributions — scale_discrete_distribution","title":"Position scales for discrete distributions — scale_discrete_distribution","text":"scales allow discrete distributions passed x y position mapping distribution objects discrete aesthetics. scale can used similarly scale_*_discrete functions. want transform scale, apply transformation coord_* functions, applied stat, existing ggplot infastructure can used.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_discrete_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for discrete distributions — scale_discrete_distribution","text":"","code":"scale_x_discrete_distribution(   name = waiver(),   palette = seq_len,   expand = waiver(),   guide = waiver(),   position = \"bottom\",   sec.axis = waiver(),   continuous.limits = NULL,   drop = TRUE,   ... )  scale_y_discrete_distribution(   name = waiver(),   palette = seq_len,   expand = waiver(),   guide = waiver(),   position = \"left\",   sec.axis = waiver(),   continuous.limits = NULL,   drop = TRUE,   ... )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_discrete_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for discrete distributions — scale_discrete_distribution","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. palette palette function called single integer argument (number levels scale) returns numerical values take. expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. guide function used create guide name. See guides() information. position position scales, position axis. left right y axes, top bottom x axes. sec.axis dup_axis() used specify secondary axis. continuous.limits One : NULL use default scale range numeric vector length two providing display range scale. Use NA refer existing minimum maximum. function accepts limits returns numeric vector length two. ... Arguments passed discrete_scale breaks One : NULL breaks waiver() default breaks (scale limits) character vector breaks function takes limits input returns breaks output. Also accepts rlang lambda function notation. limits One : NULL use default scale values character vector defines possible values scale order function accepts existing (automatic) values returns new ones. Also accepts rlang lambda function notation. drop unused factor levels omitted scale? default, TRUE, uses levels appear data; FALSE includes levels factor. Please note display every level legend, layer use show.legend = TRUE. na.translate Unlike continuous scales, discrete scales can easily show missing values, default. want remove missing values discrete scale, specify na.translate = FALSE. na.value na.translate = TRUE, aesthetic value missing values displayed ? apply position scales NA always placed far right. aesthetics names aesthetics scale works . minor_breaks One : NULL minor breaks waiver() default breaks (none discrete, one minor break major break continuous) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. function two arguments, given limits major break positions. labels One options . Please note labels vector, highly recommended also set breaks argument vector protect unintended mismatches. NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. call call used construct scale reporting messages. super super class use constructed scale","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_discrete_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Position scales for discrete distributions — scale_discrete_distribution","text":"","code":"library(ggplot2) # ggplot ggplot(smaller_diamonds, aes(x = cut, y = clarity)) +  geom_count(aes(size = after_stat(prop)))  # ggdibbler ggplot(smaller_uncertain_diamonds, aes(x = cut, y = clarity)) +   geom_count_sample(aes(size = after_stat(prop)), times=10, alpha=0.1)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_type.distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets scale for distributions — scale_type.distribution","title":"Sets scale for distributions — scale_type.distribution","text":"Generates single value distribution uses set default ggplot scale. scale can changed later ggplot using scale_* function","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_type.distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets scale for distributions — scale_type.distribution","text":"","code":"# S3 method for class 'distribution' scale_type(x)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_type.distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets scale for distributions — scale_type.distribution","text":"x value scaled","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/scale_type.distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets scale for distributions — scale_type.distribution","text":"character vector scale types. scale type ggplot scale type outcome distribution.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/smaller_uncertain_diamonds.html","id":null,"dir":"Reference","previous_headings":"","what":"An uncertain (and shrunk down) version of the diamonds data from`ggplot2` — smaller_uncertain_diamonds","title":"An uncertain (and shrunk down) version of the diamonds data from`ggplot2` — smaller_uncertain_diamonds","text":"dataset subset diamonds data. deterministic version subset (smaller_diamonds) version random variables (uncertain_smaller_diamonds). data subset ggdibbler approach can take quite long time applied full sized diamonds data set.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/smaller_uncertain_diamonds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An uncertain (and shrunk down) version of the diamonds data from`ggplot2` — smaller_uncertain_diamonds","text":"","code":"smaller_diamonds"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/smaller_uncertain_diamonds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An uncertain (and shrunk down) version of the diamonds data from`ggplot2` — smaller_uncertain_diamonds","text":"data frame almost 54000 observations 10 variables: price Binomial random variable - price US dollars ($326–$18,823) carat Normal random variable - weight diamond (0.2–5.01) cut Categorical random variable - quality cut (Fair, Good, Good, Premium, Ideal) color Categorical random variable - diamond colour, D (best) J (worst) clarity Categorical random variable - measurement clear diamond (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, (best)) x Normal random variable - length mm (0–10.74) y Normal random variable - width mm (0–58.9) z Normal random variable - depth mm (0–31.8) depth Normal random variable - total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79) table Normal random variable - width top diamond relative widest point (43–95) object class tbl_df (inherits tbl, data.frame) 1000 rows 10 columns.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/square_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for finding the ","title":"Internal function for finding the ","text":"Internal function finding \"square\" factors number","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/square_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for finding the ","text":"","code":"square_grid(x)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/stat_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a sample from a distribution — StatSample","title":"Generates a sample from a distribution — StatSample","text":"Can think ggdibbler equivalent \"stat_identity\". default stat used geoms.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/stat_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a sample from a distribution — StatSample","text":"","code":"stat_sample(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   times = 10,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/stat_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a sample from a distribution — StatSample","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. times parameter used control number values sampled distribution. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/stat_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a sample from a distribution — StatSample","text":"ggplot2 geom representing point_sample can added ggplot object","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/stat_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a sample from a distribution — StatSample","text":"","code":"library(ggplot2)  p <- ggplot(mtcars, aes(wt, mpg)) p + stat_identity()   q <- ggplot(uncertain_mtcars, aes(wt, mpg)) q + stat_sample(aes(colour = after_stat(drawID)))"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/subdivide.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for subdividing geometry grid — subdivide","title":"Internal function for subdividing geometry grid — subdivide","text":"Internal function subdividing geometry grid","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/subdivide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for subdividing geometry grid — subdivide","text":"","code":"subdivide(geometry, d)"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/toy_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy data set that has the ambient temperature as measured by a collection of citizen scientists for each Iowa county — toy_temp","title":"A toy data set that has the ambient temperature as measured by a collection of citizen scientists for each Iowa county — toy_temp","text":"several measurements county, location marker  individual scientists preserve anonyminity. Counties can  different numbers observations well different levels variance  observations county.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/toy_temp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy data set that has the ambient temperature as measured by a collection of citizen scientists for each Iowa county — toy_temp","text":"tibble 99 observations 4 variables county_name name Iowa county recorded_temp ambient temperature recorded citizen scientist scientistID ID number scientist made recording county_geometry shape file county Iowa county_longitude centroid longitude county Iowa county_latitude centroid latitude county Iowa","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/toy_temp_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy data set that provides data for a map with the temperature of each area represented by a random variable. — toy_temp_dist","title":"A toy data set that provides data for a map with the temperature of each area represented by a random variable. — toy_temp_dist","text":"map shows wave pattern temperature state Iowa. estimate also uncertainty component added, represented distribution","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/toy_temp_dist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy data set that provides data for a map with the temperature of each area represented by a random variable. — toy_temp_dist","text":"tibble 99 observations 4 variables county_name name Iowa county temp_dist temperature county distribution county_geometry shape file county Iowa","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_economics.html","id":null,"dir":"Reference","previous_headings":"","what":"An uncertain version of the economics data from`ggplot2` — uncertain_economics","title":"An uncertain version of the economics data from`ggplot2` — uncertain_economics","text":"dataset identical economics data, except every variable data set represented normal random variable. original `economics` dataset based real US economic time series data, uncertainty added hypothetical included illustrative purposes.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_economics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An uncertain version of the economics data from`ggplot2` — uncertain_economics","text":"","code":"uncertain_economics_long"},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_economics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An uncertain version of the economics data from`ggplot2` — uncertain_economics","text":"data frame almost 574 observations 6 variables: date deterministic variable - Month data collection pce Normal random variable - personal consumption expenditures, billions dollars pop Normal random variable - total population, thousands psavert Normal random variable - personal savings rate uempmed Normal random variable - median duration unemployment, weeks unemploy Normal random variable - number unemployed thousands object class tbl_df (inherits tbl, data.frame) 2870 rows 3 columns.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_mpg.html","id":null,"dir":"Reference","previous_headings":"","what":"An uncertain version of the MPG data from `ggplot2` — uncertain_mpg","title":"An uncertain version of the MPG data from `ggplot2` — uncertain_mpg","text":"dataset based Fuel economy data 1999 2008 `ggplot2`, every value represented distribution. Every variable data set represetned categorical, discrete, continuous random variable. original MPG dataset ggplot real subset fuel economy data EPA, uncertainty hypothetical uncertainty data type, added us illustrative purposes.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_mpg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An uncertain version of the MPG data from `ggplot2` — uncertain_mpg","text":"data frame 234 rows 11 variables: manufacturer manufacturer, categorical random variable model model name categorical random variable displ engine displacement, uniform random variable represent bounded data year year manufacture, sample possible years cyl number cylinders, categorical random variable trans type transmission, categorical random variable drv type drive train, categorical random variable cty city miles per gallon, discrete random variable hwy highway miles per gallon, discrete random variable fl fuel type, categorical random variable class \"type\" car, categorical random variable","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_mtcars.html","id":null,"dir":"Reference","previous_headings":"","what":"An uncertain version of the mtcars data from base R `datasets` — uncertain_mtcars","title":"An uncertain version of the mtcars data from base R `datasets` — uncertain_mtcars","text":"dataset identical mtcars data, except every  variable data set represented categorical, discrete, continuous random variable. original `mtcars` dataset datasets based real data extracted 1974 Motor Trend US magazine, uncertainty added hypothetical included illustrative purposes.","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/reference/uncertain_mtcars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An uncertain version of the mtcars data from base R `datasets` — uncertain_mtcars","text":"data frame 32 observations 11 variables: mpg Uniform random variable - Miles/(US) gallon cyl Categorical random variable - Number cylinders disp Uniform random variable - Displacement (cu..) hp Normal random variable - Gross horsepower drat Uniform random variable - Rear axle ratio wt Uniform random variable - Weight (1000 lbs) qsec Uniform random variable - 1/4 mile time vs Bernouli random variable - Engine (0 = V-shaped, 1 = straight) Bernouli random variable - Transmission (0 = automatic, 1 = manual) gear Categorical random variable - Number forward gears carb Categorical random variable- Number carburetors","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"functions-0-3-0","dir":"Changelog","previous_headings":"New Featues","what":"Functions","title":"Version v0.3.0","text":"functions heavily development, () guarantee usability beyond use cases presented example code. still kinks work grouping solution. welcome use , stick example cases next weeks (don’t go crazy random fill group aesthetics say). New additions stats geoms include: geom_bar_sample, geom_col_sample stat_count_sample geom_count_sample stat_sum_sample geom_jitter_sample geom_density_sample stat_density_sample geom_text_sample geom_label_sample geom_polygon_sample geom_rug_sample geom_path_sample, geom_line_sample, geom_step_sample also addition discrete position distribution scale: scale_x_discrete_distribution & scale_y_discrete_distribution","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"data-sets-0-3-0","dir":"Changelog","previous_headings":"New Featues","what":"Data sets","title":"Version v0.3.0","text":"go replicate ggplot2 examples, adding random versions ggplot2 data sets. make clear users package works, highlight uncertainty visualisation function existing graphic. smaller_diamonds subset ggplot2::diamonds smaller_uncertain_diamonds random variable version smaller_diamonds uncertain_mpg random variable version ggplot2::mpg uncertain_mtcars random variable uncertain_economics uncertain_economics_longer random variable version ggplot2::economics","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"Version v0.3.0","text":"included scale_*_discrete_distribution allow plotting discrete random variables","code":""},{"path":[]},{"path":[]},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"functions-0-2-0","dir":"Changelog","previous_headings":"New Featues","what":"Functions","title":"Version v0.2.0","text":"alternative version geom_point allows distribution passed aesthetic scale functions allow distributions passed position axis","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"Version v0.2.0","text":"avoids confusion n used ggplot2 functions parameter. times actually represents sample size, n dimension grid (actual sample used n2n^2) square factors times used generate subdivided grid","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"version-v010","dir":"Changelog","previous_headings":"","what":"Version v0.1.0","title":"Version v0.1.0","text":"CRAN release: 2025-07-31 Initial CRAN submission.","code":""},{"path":[]},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"functions-0-1-0","dir":"Changelog","previous_headings":"New features","what":"Functions","title":"Version v0.1.0","text":"geom_sf_sample(): Visualise sf object random variable fill","code":""},{"path":"https://harriet-mason.github.io/ggdibbler/news/index.html","id":"data-sets-0-1-0","dir":"Changelog","previous_headings":"New features","what":"Data sets","title":"Version v0.1.0","text":"toy_temp: toy data set ambient temperature measured hypothetical citizen scientists Iowa toy_temp_dist: toy data set Iowa example average temperature county","code":""}]

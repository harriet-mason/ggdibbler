% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-abline-sample.R, R/geom-hline-sample.R,
%   R/geom-vline-sample.R
\name{geom_abline_sample}
\alias{geom_abline_sample}
\alias{geom_hline_sample}
\alias{geom_vline_sample}
\title{Reference lines with uncertainty: horizontal, vertical, and diagonal}
\usage{
geom_abline_sample(
  mapping = NULL,
  data = NULL,
  stat = "sample",
  times = 10,
  ...,
  slope,
  intercept,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE
)

geom_hline_sample(
  mapping = NULL,
  data = NULL,
  stat = "sample",
  position = "identity",
  ...,
  times = 10,
  yintercept,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE
)

geom_vline_sample(
  mapping = NULL,
  data = NULL,
  stat = "sample",
  position = "identity",
  ...,
  times = 10,
  xintercept,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{times}{A parameter used to control the number of values sampled from each distribution.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display. To include legend keys for all levels, even
when no data exists, use \code{TRUE}.  If \code{NA}, all levels are shown in legend,
but unobserved levels are omitted.}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{xintercept, yintercept, slope, intercept}{Parameters that control the
position of the line. If these are set, \code{data}, \code{mapping} and
\code{show.legend} are overridden.}
}
\description{
Identical to geom_vline, geom_hline and geom_abline, except that it will accept a distribution 
in place of any of the usual aesthetics.
}
\examples{
# load libraries
library(ggplot2)
library(distributional)

# ggplot
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p + geom_abline() #' Can't see it - outside the range of the data
# ggdibbler
q <- ggplot(uncertain_mtcars, aes(wt, mpg)) + geom_point_sample()
q + geom_abline_sample() #' Can't see it - outside the range of the data
# ggplot
p + geom_abline(intercept = 20)
# ggdibbler
q + geom_abline_sample(intercept = dist_normal(20, 1))

# Fixed values
# ggplot
p + geom_vline(xintercept = 5) #ggplot
q + geom_vline_sample(xintercept = dist_normal(5, 0.1)) + #ggdibbler
  # need to add in limit control because of weird plot zooming proble
  scale_x_continuous_distribution(limits = c(0,6)) + 
  scale_y_continuous_distribution(limits = c(10,35)) 
p + geom_vline(xintercept = 1:5) #ggplot
q + geom_vline_sample(xintercept = dist_normal(1:5, 0.1)) #ggdibbler
p + geom_hline(yintercept = 20) #' ggplot
q + geom_hline_sample(yintercept = dist_normal(20, 1)) + #' ggdibbler
  #' need to add in limit control because of weird plot zooming problem
  scale_x_continuous_distribution(limits = c(0,6)) + 
  scale_y_continuous_distribution(limits = c(10,35)) 

# Calculate slope and intercept of line of best fit
# get coef and standard error
summary(lm(mpg ~ wt, data = mtcars))
# ggplot for coef
p + geom_abline(intercept = 37, slope = -5)
# ggdibbler for coef AND standard error
p + geom_abline_sample(intercept = dist_normal(37, 1.8), slope = dist_normal(-5, 0.56),
                       times=30, alpha=0.1)
}
